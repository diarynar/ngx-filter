import { chain, filter } from 'lodash';
export const onApply = (datas, filterConfig) => {
    try {
        const filterResultEquality = {};
        const filterResultDate = {};
        const filterResultSort = {};
        for (const { filterData } of filterConfig) {
            for (const key in filterData) {
                if (Object.prototype.hasOwnProperty.call(filterData, key) && filterData[key]) {
                    if (filterData["type"] === 'date') {
                        filterResultDate[`${filterData["key"]}-${filterData["operator"]}`] = {
                            operator: filterData["operator"],
                            value: filterData["value"],
                            key: filterData["key"]
                        };
                    }
                    else if (filterData["type"] === 'sort') {
                        filterResultSort[filterData["key"]] = filterData["value"];
                    }
                    else if (!!filterData["value"] || filterData["value"] === false) {
                        filterResultEquality[filterData["key"]] = filterData["value"];
                    }
                }
            }
        }
        const dataFilteredByEquality = filter(datas, filterResultEquality);
        const dataFilteredByDate = chain(dataFilteredByEquality).filter((data) => {
            let isTrue = true;
            for (const key in filterResultDate) {
                const dataDate = new Date(data[filterResultDate[key]['key']]);
                const filterDate = new Date(filterResultDate[key]["value"]);
                dataDate.setHours(0, 0, 0, 0);
                filterDate.setHours(0, 0, 0, 0);
                if (filterResultDate[key]["value"]) {
                    if (filterResultDate[key]["operator"] === 'gte' && dataDate.getTime() < filterDate.getTime()) {
                        isTrue = false;
                        return;
                    }
                    else if (filterResultDate[key]["operator"] === 'lte' && dataDate.getTime() > filterDate.getTime()) {
                        isTrue = false;
                        return;
                    }
                    else if (filterResultDate[key]["operator"] === 'eq' && dataDate.getTime() !== filterDate.getTime()) {
                        isTrue = false;
                        return;
                    }
                }
            }
            return isTrue;
        }).value();
        return { filterConfig, datas: dataFilteredByDate, type: 'group' };
    }
    catch (error) {
        return { filter: {}, datas: [], type: 'group' };
    }
};
export const searchGlobal = (datas, text = "") => {
    const result = datas.filter((data) => Object.values(data).some((val) => String(val)?.toLowerCase()?.includes(text?.toLowerCase())));
    return { datas: result, searchText: text, type: 'text' };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZmlsdGVyLWxpYnJhcnkvc3JjL2xpYi91dGlscy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUV0QyxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFZLEVBQUUsWUFBaUIsRUFBRSxFQUFFO0lBQ3ZELElBQUk7UUFDQSxNQUFNLG9CQUFvQixHQUFRLEVBQUUsQ0FBQTtRQUNwQyxNQUFNLGdCQUFnQixHQUFRLEVBQUUsQ0FBQTtRQUNoQyxNQUFNLGdCQUFnQixHQUFRLEVBQUUsQ0FBQTtRQUNoQyxLQUFLLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxZQUFZLEVBQUU7WUFDdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7Z0JBQzFCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQzFFLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLE1BQU0sRUFBRTt3QkFDL0IsZ0JBQWdCLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRzs0QkFDakUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUM7NEJBQ2hDLEtBQUssRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDOzRCQUMxQixHQUFHLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQzt5QkFDekIsQ0FBQTtxQkFDSjt5QkFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxNQUFNLEVBQUU7d0JBQ3RDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMs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QUFDLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6SSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQTtBQUM1RCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGFpbiwgZmlsdGVyIH0gZnJvbSAnbG9kYXNoJ1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uQXBwbHkgPSAoZGF0YXM6IGFueVtdLCBmaWx0ZXJDb25maWc6IGFueSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBmaWx0ZXJSZXN1bHRFcXVhbGl0eTogYW55ID0ge31cclxuICAgICAgICBjb25zdCBmaWx0ZXJSZXN1bHREYXRlOiBhbnkgPSB7fVxyXG4gICAgICAgIGNvbnN0IGZpbHRlclJlc3VsdFNvcnQ6IGFueSA9IHt9XHJcbiAgICAgICAgZm9yIChjb25zdCB7IGZpbHRlckRhdGEgfSBvZiBmaWx0ZXJDb25maWcpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZmlsdGVyRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChmaWx0ZXJEYXRhLCBrZXkpICYmIGZpbHRlckRhdGFba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJEYXRhW1widHlwZVwiXSA9PT0gJ2RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclJlc3VsdERhdGVbYCR7ZmlsdGVyRGF0YVtcImtleVwiXX0tJHtmaWx0ZXJEYXRhW1wib3BlcmF0b3JcIl19YF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogZmlsdGVyRGF0YVtcIm9wZXJhdG9yXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZpbHRlckRhdGFbXCJ2YWx1ZVwiXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogZmlsdGVyRGF0YVtcImtleVwiXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXJEYXRhW1widHlwZVwiXSA9PT0gJ3NvcnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclJlc3VsdFNvcnRbZmlsdGVyRGF0YVtcImtleVwiXV0gPSBmaWx0ZXJEYXRhW1widmFsdWVcIl1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEhZmlsdGVyRGF0YVtcInZhbHVlXCJdIHx8IGZpbHRlckRhdGFbXCJ2YWx1ZVwiXSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyUmVzdWx0RXF1YWxpdHlbZmlsdGVyRGF0YVtcImtleVwiXV0gPSBmaWx0ZXJEYXRhW1widmFsdWVcIl1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF0YUZpbHRlcmVkQnlFcXVhbGl0eSA9IGZpbHRlcihkYXRhcywgZmlsdGVyUmVzdWx0RXF1YWxpdHkpO1xyXG4gICAgICAgIGNvbnN0IGRhdGFGaWx0ZXJlZEJ5RGF0ZSA9IGNoYWluKGRhdGFGaWx0ZXJlZEJ5RXF1YWxpdHkpLmZpbHRlcigoZGF0YTogeyBbeDogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSB9KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpc1RydWUgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWx0ZXJSZXN1bHREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhRGF0ZSA9IG5ldyBEYXRlKGRhdGFbZmlsdGVyUmVzdWx0RGF0ZVtrZXldWydrZXknXV0pXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJEYXRlID0gbmV3IERhdGUoZmlsdGVyUmVzdWx0RGF0ZVtrZXldW1widmFsdWVcIl0pXHJcbiAgICAgICAgICAgICAgICBkYXRhRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKVxyXG4gICAgICAgICAgICAgICAgZmlsdGVyRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlclJlc3VsdERhdGVba2V5XVtcInZhbHVlXCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlclJlc3VsdERhdGVba2V5XVtcIm9wZXJhdG9yXCJdID09PSAnZ3RlJyAmJiBkYXRhRGF0ZS5nZXRUaW1lKCkgPCBmaWx0ZXJEYXRlLmdldFRpbWUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RydWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmaWx0ZXJSZXN1bHREYXRlW2tleV1bXCJvcGVyYXRvclwiXSA9PT0gJ2x0ZScgJiYgZGF0YURhdGUuZ2V0VGltZSgpID4gZmlsdGVyRGF0ZS5nZXRUaW1lKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUcnVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmaWx0ZXJSZXN1bHREYXRlW2tleV1bXCJvcGVyYXRvclwiXSA9PT0gJ2VxJyAmJiBkYXRhRGF0ZS5nZXRUaW1lKCkgIT09IGZpbHRlckRhdGUuZ2V0VGltZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHJ1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlzVHJ1ZVxyXG4gICAgICAgIH0pLnZhbHVlKClcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgZmlsdGVyQ29uZmlnLCBkYXRhczogZGF0YUZpbHRlcmVkQnlEYXRlLCB0eXBlOiAnZ3JvdXAnIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgZmlsdGVyOiB7fSwgZGF0YXM6IFtdLCB0eXBlOiAnZ3JvdXAnIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzZWFyY2hHbG9iYWwgPSAoZGF0YXM6IGFueVtdLCB0ZXh0ID0gXCJcIikgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gZGF0YXMuZmlsdGVyKChkYXRhKSA9PiBPYmplY3QudmFsdWVzKGRhdGEpLnNvbWUoKHZhbDogYW55KSA9PiBTdHJpbmcodmFsKT8udG9Mb3dlckNhc2UoKT8uaW5jbHVkZXModGV4dD8udG9Mb3dlckNhc2UoKSkpKTtcclxuICAgIHJldHVybiB7IGRhdGFzOiByZXN1bHQsIHNlYXJjaFRleHQ6IHRleHQsIHR5cGU6ICd0ZXh0JyB9XHJcbn0iXX0=